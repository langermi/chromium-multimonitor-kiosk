### Preseed für Debian 13 (netinst)
# Basierend auf cloud-init/kiosk-debian13.yaml
# Sprache: Deutsch (Österreich), Locale: de_AT.UTF-8

### Lokalisierung
d-i debian-installer/locale string de_AT.UTF-8
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/xkb-keymap select de

### Zeitzone
d-i time/zone string Europe/Vienna

### Netzwerk
# Interface-Auswahl dem Benutzer überlassen (WLAN/Ethernet)
d-i netcfg/choose_interface select auto
d-i netcfg/disable_autoconfig boolean false
# Bei WLAN nach SSID/Passwort fragen
d-i netcfg/wireless_wep string
d-i netcfg/wireless_essid string
d-i netcfg/wireless_essid_again string
# Hostname und Domain
d-i netcfg/get_hostname string kiosk
d-i netcfg/get_domain string unassigned-domain
# Link detection timeout erhöhen
d-i netcfg/link_wait_timeout string 10

### Spiegel (Default)
# Standardspiegelserver verwenden (automatische Auswahl)

### Partitionierung
# Partitionierungsmethode: Geführt - ganze Festplatte
d-i partman-auto/method string regular
# Festplatte auswählen lassen (fragt nach verfügbaren Festplatten)
# d-i partman-auto/disk string /dev/sda  # Auskommentiert für manuelle Auswahl
d-i partman-auto/choose_recipe select atomic

# Den Benutzer fragen, welche Festplatte verwendet werden soll
d-i partman-auto/init_automatically_partition select biggest_free

# Partitionierung bestätigen (mit Benutzerinteraktion)
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

### Root-Account: deaktiviert
d-i passwd/root-login boolean false

### Benutzer anlegen: kiosk
d-i passwd/user-fullname string Kiosk User
d-i passwd/username string kiosk
d-i passwd/user-password password kioskpass
d-i passwd/user-password-again password kioskpass
d-i user-setup/allow-password-weak boolean true
d-i user-setup/encrypt-home boolean false

d-i pkgsel/include string dbus-user-session systemd xserver-xorg gdm3 xinit chromium xdotool x11-xserver-utils curl xprintidle libpam-gnome-keyring gnome-keyring sed gnome-shell-extensions gnome-tweaks gnome-shell-extension-prefs git gnome-browser-connector apt-transport-https polkitd firmware-linux firmware-linux-nonfree firmware-misc-nonfree firmware-iwlwifi firmware-realtek firmware-atheros firmware-brcm80211 wpasupplicant wireless-tools network-manager network-manager-gnome open-vm-tools open-vm-tools-desktop qemu-guest-agent spice-vdagent xserver-xorg-video-qxl xserver-xorg-video-fbdev unclutter alsa-utils pulseaudio pulseaudio-utils pavucontrol firmware-sof-signed firmware-amd-graphics xserver-xorg-video-amdgpu xserver-xorg-video-radeon mesa-vulkan-drivers libgl1-mesa-dri va-driver-all vdpau-driver-all mesa-va-drivers mesa-vdpau-drivers nvidia-detect pciutils lshw dmidecode
d-i pkgsel/upgrade select none

d-i popularity-contest/participate boolean false

d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true

d-i preseed/late_command string \
    in-target /bin/bash -c "mkdir -p /home/kiosk/.config/systemd/user" && \
    in-target /bin/bash -c "echo '# Allow kiosk to reboot/poweroff without a password' > /etc/sudoers.d/kiosk-nopasswd && echo 'kiosk ALL=(ALL) NOPASSWD: /bin/systemctl reboot, /bin/systemctl poweroff' >> /etc/sudoers.d/kiosk-nopasswd && chmod 0440 /etc/sudoers.d/kiosk-nopasswd" && \
    in-target /bin/bash -c "mkdir -p /etc/gdm3/daemon.conf.d && echo '[daemon]' > /etc/gdm3/daemon.conf.d/99_kiosk.conf && echo 'AutomaticLoginEnable=true' >> /etc/gdm3/daemon.conf.d/99_kiosk.conf && echo 'AutomaticLogin=kiosk' >> /etc/gdm3/daemon.conf.d/99_kiosk.conf && echo 'WaylandEnable=false' >> /etc/gdm3/daemon.conf.d/99_kiosk.conf" && \
    in-target /bin/bash -c "mkdir -p /home/kiosk/.config/autostart" && \
    in-target /bin/bash -c "echo '[Desktop Entry]' > /home/kiosk/.config/autostart/gnome-keyring-secrets.desktop && echo 'Type=Application' >> /home/kiosk/.config/autostart/gnome-keyring-secrets.desktop && echo 'Name=Disable GNOME Keyring Secrets' >> /home/kiosk/.config/autostart/gnome-keyring-secrets.desktop && echo 'X-GNOME-Autostart-enabled=false' >> /home/kiosk/.config/autostart/gnome-keyring-secrets.desktop" && \
    in-target /bin/bash -c "echo '[Desktop Entry]' > /home/kiosk/.config/autostart/gnome-keyring-pkcs11.desktop && echo 'Type=Application' >> /home/kiosk/.config/autostart/gnome-keyring-pkcs11.desktop && echo 'Name=Disable GNOME Keyring PKCS11' >> /home/kiosk/.config/autostart/gnome-keyring-pkcs11.desktop && echo 'X-GNOME-Autostart-enabled=false' >> /home/kiosk/.config/autostart/gnome-keyring-pkcs11.desktop" && \
    in-target /bin/bash -c "echo '[Desktop Entry]' > /home/kiosk/.config/autostart/gnome-keyring-ssh.desktop && echo 'Type=Application' >> /home/kiosk/.config/autostart/gnome-keyring-ssh.desktop && echo 'Name=Disable GNOME Keyring SSH' >> /home/kiosk/.config/autostart/gnome-keyring-ssh.desktop && echo 'X-GNOME-Autostart-enabled=false' >> /home/kiosk/.config/autostart/gnome-keyring-ssh.desktop" && \
    in-target /bin/bash -c "echo '#!/bin/bash' > /tmp/detect_hardware.sh && echo 'set -euo pipefail' >> /tmp/detect_hardware.sh && echo 'echo \"[Hardware Detection] Starting hardware detection...\"' >> /tmp/detect_hardware.sh && echo 'GPU_VENDOR=\"\"' >> /tmp/detect_hardware.sh && echo 'VIRTUALIZATION=\"\"' >> /tmp/detect_hardware.sh && echo 'if dmidecode -s system-product-name 2>/dev/null | grep -iq virtualbox; then' >> /tmp/detect_hardware.sh && echo '    VIRTUALIZATION=\"virtualbox\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] VirtualBox detected\"' >> /tmp/detect_hardware.sh && echo 'elif dmidecode -s system-product-name 2>/dev/null | grep -iq vmware; then' >> /tmp/detect_hardware.sh && echo '    VIRTUALIZATION=\"vmware\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] VMware detected\"' >> /tmp/detect_hardware.sh && echo 'elif dmidecode -s system-product-name 2>/dev/null | grep -iq \"kvm\\|qemu\"; then' >> /tmp/detect_hardware.sh && echo '    VIRTUALIZATION=\"kvm\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] KVM/QEMU detected\"' >> /tmp/detect_hardware.sh && echo 'fi' >> /tmp/detect_hardware.sh && echo 'if lspci | grep -i \"VGA\\|3D\\|Display\" | grep -iq nvidia; then' >> /tmp/detect_hardware.sh && echo '    GPU_VENDOR=\"nvidia\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] NVIDIA GPU detected\"' >> /tmp/detect_hardware.sh && echo 'elif lspci | grep -i \"VGA\\|3D\\|Display\" | grep -iq \"AMD\\|ATI\\|Radeon\"; then' >> /tmp/detect_hardware.sh && echo '    GPU_VENDOR=\"amd\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] AMD GPU detected\"' >> /tmp/detect_hardware.sh && echo 'elif lspci | grep -i \"VGA\\|3D\\|Display\" | grep -iq intel; then' >> /tmp/detect_hardware.sh && echo '    GPU_VENDOR=\"intel\"' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] Intel GPU detected\"' >> /tmp/detect_hardware.sh && echo 'else' >> /tmp/detect_hardware.sh && echo '    echo \"[Hardware Detection] Unknown or integrated GPU detected\"' >> /tmp/detect_hardware.sh && echo 'fi' >> /tmp/detect_hardware.sh && echo 'case \$VIRTUALIZATION in' >> /tmp/detect_hardware.sh && echo '    \"virtualbox\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] Installing VirtualBox guest additions...\"' >> /tmp/detect_hardware.sh && echo '        DEBIAN_FRONTEND=noninteractive apt-get update -qq || true' >> /tmp/detect_hardware.sh && echo '        DEBIAN_FRONTEND=noninteractive apt-get install -y virtualbox-guest-utils virtualbox-guest-x11 2>/dev/null || echo \"VirtualBox guest additions not available in current repos\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo '    \"vmware\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] VMware tools already installed via open-vm-tools\"' >> /tmp/detect_hardware.sh && echo '        DEBIAN_FRONTEND=noninteractive apt-get install -y xserver-xorg-video-vmware 2>/dev/null || echo \"VMware video driver not available\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo '    \"kvm\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] KVM/QEMU guest tools already configured\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo 'esac' >> /tmp/detect_hardware.sh && echo 'case \$GPU_VENDOR in' >> /tmp/detect_hardware.sh && echo '    \"nvidia\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] Installing NVIDIA drivers...\"' >> /tmp/detect_hardware.sh && echo '        if nvidia-detect 2>/dev/null | grep -q \"nvidia-driver\"; then' >> /tmp/detect_hardware.sh && echo '            DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-driver nvidia-settings nvidia-xconfig || echo \"NVIDIA driver installation failed\"' >> /tmp/detect_hardware.sh && echo '            nvidia-xconfig --preserve-busid --enable-all-gpus --separate-x-screens --connected-monitor=DFP || echo \"nvidia-xconfig failed\"' >> /tmp/detect_hardware.sh && echo '        else' >> /tmp/detect_hardware.sh && echo '            echo \"[Hardware Detection] No suitable NVIDIA driver found\"' >> /tmp/detect_hardware.sh && echo '        fi' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo '    \"amd\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] AMD drivers already installed via mesa packages\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo '    \"intel\")' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] Installing Intel graphics drivers...\"' >> /tmp/detect_hardware.sh && echo '        DEBIAN_FRONTEND=noninteractive apt-get install -y xserver-xorg-video-intel || echo \"Intel video driver installation failed\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo '    *)' >> /tmp/detect_hardware.sh && echo '        echo \"[Hardware Detection] Using generic drivers\"' >> /tmp/detect_hardware.sh && echo '        ;;' >> /tmp/detect_hardware.sh && echo 'esac' >> /tmp/detect_hardware.sh && echo 'echo \"[Hardware Detection] Configuring audio...\"' >> /tmp/detect_hardware.sh && echo 'systemctl --global enable pulseaudio.service || echo \"PulseAudio enable failed\"' >> /tmp/detect_hardware.sh && echo 'systemctl --global enable pulseaudio.socket || echo \"PulseAudio socket enable failed\"' >> /tmp/detect_hardware.sh && echo 'usermod -a -G audio kiosk || echo \"Audio group assignment failed\"' >> /tmp/detect_hardware.sh && echo 'echo \"[Hardware Detection] Installing Intel media drivers if available...\"' >> /tmp/detect_hardware.sh && echo 'DEBIAN_FRONTEND=noninteractive apt-get install -y intel-media-va-driver 2>/dev/null || echo \"Intel media VA driver not available\"' >> /tmp/detect_hardware.sh && echo 'echo \"[Hardware Detection] Hardware detection completed\"' >> /tmp/detect_hardware.sh && chmod +x /tmp/detect_hardware.sh" && \
    in-target /bin/bash -c "/tmp/detect_hardware.sh > /var/log/hardware_detection.log 2>&1 || echo 'Hardware detection script failed'" && \
    in-target /bin/bash -c "mkdir -p /home/kiosk/chromium-multimonitor-kiosk && chown -R kiosk:kiosk /home/kiosk" && \
    in-target /bin/bash -c "cd /home/kiosk && sudo -u kiosk git clone https://github.com/langermi/chromium-multimonitor-kiosk.git || true" && \
    in-target /bin/bash -c "chmod +x /home/kiosk/chromium-multimonitor-kiosk/startkiosk.sh /home/kiosk/chromium-multimonitor-kiosk/config.sh /home/kiosk/chromium-multimonitor-kiosk/scripts/*.sh || true" && \
    in-target /bin/bash -c "if [ -x /home/kiosk/chromium-multimonitor-kiosk/scripts/install_systemd_user_service.sh ]; then su -s /bin/bash -c '/home/kiosk/chromium-multimonitor-kiosk/scripts/install_systemd_user_service.sh' kiosk || true; fi" && \
    in-target /bin/bash -c "chown -R kiosk:kiosk /home/kiosk/.config" && \
    in-target /bin/bash -c "loginctl enable-linger kiosk || true" && \
    in-target /bin/bash -c "sudo -u kiosk systemctl --user daemon-reload || true" && \
    in-target /bin/bash -c "sudo -u kiosk systemctl --user enable chromium-kiosk.service || true" && \
    in-target /bin/bash -c "systemctl restart gdm3 || true"